name: CI

env:
  PROJECT_NAME: unison
  PROJECT_DESC: "`unison` file synchronizer"
  PROJECT_EXES: "unison unison-fsmonitor"

on:
  - pull_request
  - push

jobs:
  docs:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use OCaml
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: 4.14.x
        opam-depext: false

    - run: sudo apt-get install hevea lynx texlive-latex-base

    - run: opam exec -- make docs

    - name: Store user manual for the build jobs
      uses: actions/upload-artifact@v2
      with:
        name: unison-docs
        path: |
          doc/unison-manual.txt
          doc/unison-manual.html
          doc/unison-manual.pdf

  build:
    if: ${{ !cancelled() }}    # Don't fail if 'docs' failed
    needs: docs

    strategy:
      fail-fast: false
      matrix:
        job:
        - { os: macos-11      , ocaml-version: 4.14.0 }
        - { os: macos-10.15   , ocaml-version: 4.14.0  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.13.1  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.12.1  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.11.2  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.10.2  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.09.1  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.08.1  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.07.1  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.06.1  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.05.0  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.04.2  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.03.0  , publish: true }
        - { os: macos-10.15   , ocaml-version: 4.02.3  , publish: true }
        - { os: ubuntu-20.04  , ocaml-version: 4.14.0 }
        - { os: ubuntu-18.04  , ocaml-version: 4.14.0  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.13.1  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.12.1  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.11.2  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.10.2  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.10.2+musl+static+flambda  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.09.1  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.08.1  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.07.1  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.06.1  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.05.0  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.04.2  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.03.0  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.02.3  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.01.0  , publish: true }
        - { os: windows-2022  , ocaml-version: 4.14.0+mingw64c }
        - { os: windows-2019  , ocaml-version: 4.14.0+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.13.1+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.12.1+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.11.2+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.10.2+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.10.2+mingw32c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.09.1+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.08.1+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.07.1+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.06.1+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.05.0+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.04.2+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.03.0+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.02.3+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.01.0+mingw64c  , publish: true }

    runs-on: ${{ matrix.job.os }}

    steps:
    - if: runner.os == 'Windows'
      name: "Windows: Stash away the default MSYS installation"
      continue-on-error: true
      shell: cmd
      # This conflicts with Cygwin installed by setup-ocaml
      # Adjusting PATH alone does not seem to work
      run: rename C:\msys64 dmsys64

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Initialize workflow variables
      id: vars
      shell: bash
      run: |
        outputs() { for var in "$@" ; do echo steps.vars.outputs.${var}="${!var}"; echo ::set-output name=${var}::${!var}; done; }
        # normalize to pre-compiled ocaml compiler variants for windows/Cygwin (decreases OCaml install time by 50%)
        case '${{ matrix.job.ocaml-version }}' in
          *+*) OCAML_COMPILER='ocaml-variants.${{ matrix.job.ocaml-version }}' ;;
            *) OCAML_COMPILER='ocaml-base-compiler.${{ matrix.job.ocaml-version }}' ;;
        esac
        OCAML_VARIANT='${{ matrix.job.ocaml-version }}'
        outputs OCAML_VARIANT OCAML_COMPILER
        # architecture/platform vars
        EXE_suffix='' ; case '${{ matrix.job.os }}' in windows-*) EXE_suffix=".exe" ;; esac
        MinGW_ARCH='x86_64' ; case '${{ matrix.job.ocaml-version }}' in *+mingw32*) MinGW_ARCH='i686' ;; *+mingw64*) MinGW_ARCH='x86_64' ;; esac
        MSVC_ARCH='' ; case '${{ matrix.job.ocaml-version }}' in *+msvc32*) MSVC_ARCH='x86' ;; *+msvc64*) MSVC_ARCH='x64' ;; esac
        STATIC='false' ; case '${{ matrix.job.ocaml-version }}' in *+musl*) STATIC='true' ;; esac
        outputs EXE_suffix MinGW_ARCH MSVC_ARCH STATIC
        case '${{ matrix.job.os }}' in macos-*) echo "MACOSX_DEPLOYMENT_TARGET=10.6" >> $GITHUB_ENV ;; esac
        # staging environment
        STAGING_DIR='_staging'
        outputs STAGING_DIR
        # parse commit reference info
        echo GITHUB_REF=${GITHUB_REF}
        echo GITHUB_SHA=${GITHUB_SHA}
        REF_NAME="${GITHUB_REF#refs/*/}"
        unset REF_BRANCH ; case "${GITHUB_REF}" in refs/heads/*) REF_BRANCH="${GITHUB_REF#refs/heads/}" ;; esac;
        unset REF_TAG ; case "${GITHUB_REF}" in refs/tags/*) REF_TAG="${GITHUB_REF#refs/tags/}" ;; esac;
        REF_SHAS="${GITHUB_SHA:0:8}"
        outputs REF_BRANCH REF_NAME REF_SHAS REF_TAG
        # deployable tag? (ie, leading "vM" or "M"; M == version number)
        unset DEPLOY ; if [[ $REF_TAG =~ ^[vV]?[0-9].* ]]; then DEPLOY='true' ; fi
        outputs DEPLOY
        # package name
        PKG_suffix='.tar.gz' ; case '${{ matrix.job.os }}' in windows-*) PKG_suffix='.zip' ;; esac;
        PKG_OS='linux' ; case '${{ matrix.job.os }}' in macos-*) PKG_OS='${{ matrix.job.os }}' ;; windows-*) PKG_OS='windows' ;; esac;
        PKG_STATIC='' ; case '${{ matrix.job.ocaml-version }}' in *+static*) PKG_STATIC='.static' ;; esac;
        PKG_ARCH='x86_64' ; case '${{ matrix.job.ocaml-version }}' in *+32bit* | *+mingw32*) PKG_ARCH='i386' ;; esac;
        PKG_VER="${REF_TAG:-$REF_SHAS}"
        PKG_BASENAME="${PROJECT_NAME}-${PKG_VER}+ocaml-${OCAML_VARIANT/%+*/}+${PKG_ARCH}.${PKG_OS}${PKG_STATIC}"
        PKG_NAME="${PKG_BASENAME}${PKG_suffix}"
        PKG_DIR="${STAGING_DIR}/${PKG_BASENAME}"
        outputs PKG_VER PKG_BASENAME PKG_DIR PKG_NAME PKG_OS PKG_suffix
        COMPRESS_CMD='tar czf'; case '${{ matrix.job.os }}' in windows-*) COMPRESS_CMD='7z -y a' ;; esac;
        outputs COMPRESS_CMD

    - name: Create/configure any needed build/workspace
      shell: bash
      run: |
        # create build/work space
        mkdir -p '${{ steps.vars.outputs.STAGING_DIR }}'
        mkdir -p '${{ steps.vars.outputs.PKG_DIR }}'
        mkdir -p '${{ steps.vars.outputs.PKG_DIR }}'/bin

    - name: Select Xcode version 11.7 for OCaml 4.05 (macOS)
      if: runner.os == 'macOS' && matrix.job.ocaml-version == '4.05.0'
      ## Xcode >= 12 breaks building lablgtk with OCaml 4.05 (a bug fixed in OCaml >= 4.06)
      run: |
        sudo xcode-select -s "/Applications/Xcode_11.7.app"

    - name: Enable/config MSVC environment (if/when needed)
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: "${{ steps.vars.outputs.MSVC_ARCH }}"
      if: contains(matrix.job.ocaml-version, '+msvc')

    - name: "Windows: Cygwin setup"
      if: runner.os == 'Windows'
      run: Invoke-WebRequest 'https://cygwin.com/setup-x86_64.exe' -OutFile 'setup-x86_64.exe'

    # [2022-05] Cygwin mingw64 binutils 2.38 produces invalid GUI binaries.
    # Pin binutils to version 2.37 as a workaround.
    - name: "Windows: mingw64 binutils workaround hack"
      if: runner.os == 'Windows'
      # The setup does not complete properly in powershell for some reason
      shell: cmd
      run: .\setup-x86_64.exe --quiet-mode --root D:\cygwin --site http://cygwin.mirror.constant.com --symlink-type=sys --packages mingw64-i686-binutils=2.37-2,mingw64-x86_64-binutils=2.37-2

    - name: Use OCaml ${{ matrix.job.ocaml-version }}
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: "${{ steps.vars.outputs.OCAML_COMPILER }}"
        opam-pin: false
        opam-depext: false
      # setup-ocaml can prepare the build environment from unison.opam
      # We're not relying on that capability here, to make sure the builds
      # also work without using unison.opam

    ## note: at this point, after OCaml installation, windows platforms will use Cygwin bash as the default
    ##   ... Cygwin bash cannot handle shell scripts containing CRLF EOLs (which are what is generated by GHA on windows platforms)
    ##   ... so, "igncr" must be added to SHELLOPTS

    - name: Prepare Cygwin environment (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo %CYGWIN_ROOT_BIN%>> %GITHUB_PATH%
        echo %CYGWIN_ROOT_WRAPPERBIN%>> %GITHUB_PATH%
        echo SHELLOPTS=igncr>> %GITHUB_ENV%

    - shell: bash
      run: |
        opam exec -- make src OSTYPE=$OSTYPE UISTYLE=text STATIC=${{ steps.vars.outputs.STATIC }}
        # stage
        # * notes: darwin/macos doesn't build `unison-fsmonitor`
        for file in ${PROJECT_EXES} ; do
          if [ -f "src/${file}${{ steps.vars.outputs.EXE_suffix }}" ]; then
            cp "src/${file}${{ steps.vars.outputs.EXE_suffix }}" '${{ steps.vars.outputs.PKG_DIR }}/bin'
            echo "'src/${file}${{ steps.vars.outputs.EXE_suffix }}' copied to '${{ steps.vars.outputs.PKG_DIR }}/bin'"
          fi
        done

    - run: opam exec -- make test

    - name: Run self-tests over RPC
      if: runner.os == 'Windows' && !contains(matrix.job.ocaml-version, '4.14')
      shell: bash
      run: |
        # Separate backup dir must be set for server instance so that the central
        # backup location of both instances doesn't overlap
        UNISONBACKUPDIR=./src/testbak2 ./src/unison -socket 55443 &
        sleep 1 # Wait for the server to be fully started
        ./src/unison -ui text -selftest testr1 socket://127.0.0.1:55443/testr2 -killserver

    - name: Run self-tests over local socket
      # Recent Windows versions do support Unix domain sockets
      # but at least OCaml 4.14 is required to use that support
      if: runner.os != 'Windows' || contains(matrix.job.ocaml-version, '4.14')
      shell: bash
      run: |
        mkdir localsocket
        chmod 700 localsocket
        # Separate backup dir must be set for server instance so that the central
        # backup location of both instances doesn't overlap
        UNISONBACKUPDIR=./src/testbak4 ./src/unison -socket ./localsocket/test.sock &
        sleep 1 # Wait for the server to be fully started
        ${{ runner.os == 'Windows' }} || test -S ./localsocket/test.sock
        ./src/unison -ui text -selftest testr3 socket://{./localsocket/test.sock}/testr4 -killserver

    - name: Prepare lablgtk install (Windows)
      if: ${{ runner.os == 'Windows' && contains(matrix.job.ocaml-version, '+mingw') }}
      run: |
        opam install opam-depext depext-cygwinports
        echo "/usr/${{ steps.vars.outputs.MinGW_ARCH }}-w64-mingw32/sys-root/mingw/bin" >> $GITHUB_PATH

    - name: lablgtk install
      ## [2020-09] non-working/unavailable for MSVC or musl OCaml variants ; also, non-working for 32bit OCaml variant (see [GH:garrigue/lablgtk#64](https://github.com/garrigue/lablgtk/issues/64))
      ## [2022-01] lablgtk 2.18.12 builds seem to hang on Windows with OCaml < 4.10.0
      if: ${{ ! ( contains(matrix.job.ocaml-version, '+msvc') || contains(matrix.job.ocaml-version, '+musl') || contains(matrix.job.ocaml-version, '+32bit') || (contains(matrix.job.ocaml-version, '+mingw') && matrix.job.ocaml-version < '4.10.0') ) }}
      run: opam depext --install --verbose --yes lablgtk

    - name: lablgtk install compatibility hack
      ## [2022-01] lablgtk 2.18.12 builds seem to hang on Windows with OCaml < 4.10.0; this is a hack to work around the issue
      if: ${{ contains(matrix.job.ocaml-version, '+mingw') && matrix.job.ocaml-version < '4.10.0' }}
      shell: cmd
      run: opam depext --install --verbose --yes lablgtk^^^<2.18.12

    - if: steps.vars.outputs.STATIC != 'true' ## unable to build static gtk for linux or windows/Cygwin MinGW platforms
      shell: bash
      run: |
        opam exec -- make src OSTYPE=$OSTYPE UISTYLE=gtk2 STATIC=${{ steps.vars.outputs.STATIC }}
        # stage
        # * copy only main/first project binary
        project_exe_stem=${PROJECT_EXES%% *}
        cp "src/${project_exe_stem}${{ steps.vars.outputs.EXE_suffix }}" "${{ steps.vars.outputs.PKG_DIR }}/bin/${project_exe_stem}-gtk2${{ steps.vars.outputs.EXE_suffix }}"

    - uses: actions/upload-artifact@v2
      with:
        name: unison-${{ steps.vars.outputs.REF_SHAS }}.ocaml-${{ matrix.job.ocaml-version }}.${{ matrix.job.os }}
        path: ${{ steps.vars.outputs.PKG_DIR }}/bin/*

    - name: Copy user manual
      continue-on-error: ${{ !(steps.vars.outputs.DEPLOY && matrix.job.publish) }}
      uses: actions/download-artifact@v2
      with:
        name: unison-docs
        path: '${{ steps.vars.outputs.PKG_DIR }}'

    - name: Prepare package
      # if: steps.vars.outputs.DEPLOY
      shell: bash
      run: |
        ## package artifact(s)
        PKG_DIR='${{ steps.vars.outputs.PKG_DIR }}'
        # `strip` binaries
        strip "${PKG_DIR}/bin"/*'${{ steps.vars.outputs.EXE_suffix }}'
        # README and LICENSE
        (shopt -s nullglob; for f in [R]'EADME'{,.*}; do cp $f "${PKG_DIR}"/ ; done)
        (shopt -s nullglob; for f in [L]'ICENSE'{-*,}{,.*}; do cp $f "${PKG_DIR}"/ ; done)

    - if: runner.os == 'Windows'
      name: "Windows: Package gtk"
      shell: bash
      run: |
        ## package artifact(s)
        PKG_DIR='${{ steps.vars.outputs.PKG_DIR }}'
        # collect any needed dlls/libraries
        # dlls
        dll_refs() { eval "$(opam env)" ; eval "$(ocaml-env cygwin)" ; objdump -x "$@" | grep -Po "\S+[.]dll$" | xargs -I{} 2>/dev/null which "{}" | sort -u ; }
        filtered_dll_refs() { list="$(dll_refs "$@" | grep -vF "$(cygpath ${WINDIR})" | perl -lape '$_ = qq/@{[sort @F]}/')" ; echo "$list" ; }
        recursive_filtered_dll_refs() { list="$(filtered_dll_refs "$@")" ; n=0 ; while [ $n -lt $(echo "$list" | wc -l) ]; do n=$(echo "$list" | wc -l) ; list="$(filtered_dll_refs $list)" ; done ; echo "$list" ; }
        IFS=$'\n' DLL_list=( "$(recursive_filtered_dll_refs "${PKG_DIR}"/bin/*)" )
        for dll in ${DLL_list[@]} ; do cp "${dll}" "${PKG_DIR}"/bin ; done
        TARGET_ARCH_ID='x86_64'; case '${{ matrix.job.ocaml-version }}' in *+mingw32*|*+msvc32*) TARGET_ARCH_ID='i686' ;; esac
        # required gdk support files
        mkdir "${PKG_DIR}"/lib
        cp -r /usr/${TARGET_ARCH_ID}-w64-mingw32/sys-root/mingw/lib/gdk-pixbuf-2.0 "${PKG_DIR}"/lib/
        # update loader.cache to point to local relative installation
        mv "${PKG_DIR}"/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache "${PKG_DIR}"/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache.original
        cat "${PKG_DIR}"/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache.original | sed -E 's#([^"]*)(lib/gdk-pixbuf-2.0/2.10.0/loaders/[^"]*[.]dll)#../\2#' > "${PKG_DIR}"/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
        rm "${PKG_DIR}"/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache.original

    - name: Package
      shell: bash
      run: cd '${{ steps.vars.outputs.PKG_DIR }}/' && ${{ steps.vars.outputs.COMPRESS_CMD }} '../${{ steps.vars.outputs.PKG_NAME }}' *

    - name: Publish
      if: steps.vars.outputs.DEPLOY && matrix.job.publish
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.vars.outputs.STAGING_DIR }}/${{ steps.vars.outputs.PKG_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - if: runner.os == 'macOS'
      name: "macOS: Build and package Unison.app"
      id: macapp
      run: |
        opam exec -- make src UISTYLE=mac

        # package
        APP_NAME=Unison-${{ steps.vars.outputs.PKG_VER }}.ocaml-${{ matrix.job.ocaml-version }}.${{ matrix.job.os }}.app.tar.gz
        echo ::set-output name=APP_NAME::${APP_NAME}

        tar czf ${APP_NAME} -C src/uimac/build/Default Unison.app

    - if: runner.os == 'macOS'
      name: "macOS: Upload Unison.app artifact"
      uses: actions/upload-artifact@v2
      with:
        name: Unison-${{ steps.vars.outputs.REF_SHAS }}.ocaml-${{ matrix.job.ocaml-version }}.${{ matrix.job.os }}.app
        path: ${{ steps.macapp.outputs.APP_NAME }}

    - if: runner.os == 'macOS' && steps.vars.outputs.DEPLOY && matrix.job.publish
      name: "macOS: Publish Unison.app"
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.macapp.outputs.APP_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  rpc_abicheck:
    needs: build

    strategy:
      fail-fast: false
      matrix:
        job:
        - { os: ubuntu-18.04  , ocaml-version: 4.14.x  , ref: v2.52.0 }
        - { os: ubuntu-18.04  , ocaml-version: 4.14.x  , ref: v2.51.5 }
        - { os: ubuntu-18.04  , ocaml-version: 4.08.x  , ref: v2.51.5 }
        - { os: ubuntu-18.04  , ocaml-version: 4.05.x  , ref: v2.51.5 }
        - { os: ubuntu-18.04  , ocaml-version: 4.08.x  , ref: v2.51.2 }
        - { os: ubuntu-18.04  , ocaml-version: 4.05.x  , ref: v2.51.2 }
        - { os: ubuntu-18.04  , ocaml-version: 4.02.3  , ref: v2.51.0 }
        - { os: ubuntu-18.04  , ocaml-version: 4.08.x  , ref: 2.48.4 }
        - { os: ubuntu-18.04  , ocaml-version: 4.05.x  , ref: 2.48.4 }
        - { os: ubuntu-18.04  , ocaml-version: 4.01.x  , ref: 2.48.4 }

    runs-on: ${{ matrix.job.os }}

    steps:
    - name: Use OCaml ${{ matrix.job.ocaml-version }}
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: "${{ matrix.job.ocaml-version }}"
        opam-pin: false
        opam-depext: false
      # setup-ocaml can prepare the build environment from unison.opam
      # We're not relying on that capability here, to make sure the builds
      # also work without using unison.opam

    - name: Checkout HEAD to _new
      uses: actions/checkout@v3
      with:
        path: _new

    - name: "2.48: Patch tests in _new"
      if: contains(matrix.job.ref, '2.48')
      shell: bash
      run: |
        # 'atomic' was introduced in 2.51.0
        cd _new && git apply - <<"EOF"
        diff --git a/src/test.ml b/src/test.ml
        index 60ccd05..45395e5 100644
        --- a/src/test.ml
        +++ b/src/test.ml
        @@ -338,43 +338,6 @@ let test() =
              running fast enough that the whole thing happens within a second, then the
              update will be missed! *)
         
        -  (* Test that .git is treated atomically. *)
        -  runtest "Atomicity of certain directories 1" ["atomic = Name .git";
        -                                                "force = newer"] (fun() ->
        -      let orig = (Dir ["foo", Dir [".git", Dir ["a", File "foo";
        -                                                "b", File "bar";
        -                                                "c", File "baz"]]]) in
        -      put R1 orig;
        -      Unix.sleep 2; (* in case time granularity is coarse on this FS *)
        -      put R2 orig; sync();
        -      let expected = (Dir ["foo", Dir [".git", Dir ["a", File "modified on R1";
        -                                                    "b", File "bar";
        -                                                    "c", File "modified on R1"]]]) in
        -      put R2 (Dir ["foo", Dir [".git",
        -                               Dir ["a", File "foo";
        -                                    "b", File "modified on R2";
        -                                    "c", File "modified on R2"]]]);
        -      Unix.sleep 2; 
        -      put R1 expected;
        -      sync ();
        -      check "1" R2 expected;
        -      check "2" R1 expected
        -    );
        -
        -  runtest "Atomicity of certain directories 2" ["atomic = Name .git"] (fun() ->
        -      let a = (Dir ["foo", Dir [".git", Dir ["a", File "foo";
        -                                             "b", File "bar";
        -                                             "c", File "baz";
        -                                             "d", File "quux"]]]) in
        -      let b = (Dir ["foo", Dir [".git", Dir ["a", File "foo";
        -                                             "b", File "bar";
        -                                             "c", File "baz";
        -                                             "e", File "quux"]]]) in
        -      put R1 a; put R2 b; sync();
        -      check "1" R1 a;
        -      check "2" R2 b
        -    );
        -
           (* Check for the bug reported by Ralf Lehmann *)
           if not bothRootsLocal then
             runtest "backups 1 (remote)" ["backup = Name *"] (fun() ->
        EOF

    - run: cd _new && opam exec -- make src UISTYLE=text

    - name: Checkout ${{ matrix.job.ref }} to _prev
      uses: actions/checkout@v3
      with:
        ref: "${{ matrix.job.ref }}"
        path: _prev

    - name: "2.48: Patch tests in _prev"
      if: contains(matrix.job.ref, '2.48')
      shell: bash
      run: |
        # Self-tests were broken in 2.48.4 release
        cd _prev && git apply - <<"EOF"
        diff --git a/src/test.ml b/src/test.ml
        index 6e8f943c..6c0bbded 100644
        --- a/src/test.ml
        +++ b/src/test.ml
        @@ -324,7 +324,7 @@ let test() =
        
           (* Check for the bug reported by Ralf Lehmann *)
           if not bothRootsLocal then 
        -    runtest "backups 1 (remote)" ["backup = Name *"] (fun() -> 
        +    runtest "backups 1 (remote)" ["backup = Name *"; "fastcheck = false"] (fun() ->
               put R1 (Dir []); put R2 (Dir []); sync();
               debug (fun () -> Util.msg "First check\n");
               checkmissing "1" BACKUP1;
        @@ -370,7 +370,6 @@ let test() =
               check "4" R2 (Dir ["x", File "foo"]);
             );
        
        -  (raise (Util.Fatal "Skipping some tests -- remove me!\n") : unit); 
        
           if bothRootsLocal then 
             runtest "backups 1 (local)" ["backup = Name *"] (fun() -> 
        @@ -397,12 +397,12 @@ let test() =
             check "1" R2 (Dir [(".bak.0.x", File "foo"); (".bak.0.d", Dir [("a", File "barr")])]);
           );
        
        -  runtest "backups 2a" ["backup = Name *"; "backuplocation = local"] (fun() -> 
        +  runtest "backups 2a" ["backup = Name *"; "backuplocation = local"; "fastcheck = false"] (fun() ->
             put R1 (Dir []); put R2 (Dir []); sync();
             (* Create a file and a directory *)
             put R1 (Dir ["foo", File "1"]); sync();
             check "1" R1 (Dir [("foo", File "1")]);
        -    check "2" R1 (Dir [("foo", File "1")]);
        +    check "2" R2 (Dir [("foo", File "1")]);
             put R1 (Dir ["foo", File "2"]); sync();
             check "3" R1 (Dir [("foo", File "2")]);
             check "4" R2 (Dir [("foo", File "2"); (".bak.0.foo", File "1")]); 
        EOF

    - name: "2.48: Patch _prev for newer compilers"
      if: contains(matrix.job.ref, '2.48') && matrix.job.ocaml-version >= '4.03'
      shell: bash
      run: |
        cd _prev && git apply - <<"EOF"
        diff --git a/src/Makefile.OCaml b/src/Makefile.OCaml
        index 21610ce6..75499079 100644
        --- a/src/Makefile.OCaml
        +++ b/src/Makefile.OCaml
        @@ -95,7 +95,7 @@ buildexecutable::
         ### Default parameters
        
         # Generate backtrace information for exceptions
        -CAMLFLAGS+=-g
        +CAMLFLAGS+=-g -unsafe-string
        
         INCLFLAGS=-I lwt -I ubase -I system
         CAMLFLAGS+=$(INCLFLAGS)
        diff --git a/src/files.ml b/src/files.ml
        index ba42ad57..5babf21e 100644
        --- a/src/files.ml
        +++ b/src/files.ml
        @@ -722,7 +722,7 @@ let get_files_in_directory dir =
           with End_of_file ->
             dirh.System.closedir ()
           end;
        -  Sort.list (<) !files
        +  List.sort String.compare !files
        
         let ls dir pattern =
           Util.convertUnixErrorsToTransient
        diff --git a/src/recon.ml b/src/recon.ml
        index 5ed358d7..0df2cfe4 100644
        --- a/src/recon.ml
        +++ b/src/recon.ml
        @@ -651,8 +651,8 @@ let rec reconcile
        
         (* Sorts the paths so that they will be displayed in order                   *)
         let sortPaths pathUpdatesList =
        -  Sort.list
        -    (fun (p1, _) (p2, _) -> Path.compare p1 p2 <= 0)
        +  List.sort
        +    Path.compare
             pathUpdatesList
        
         let rec enterPath p1 p2 t =
        diff --git a/src/system/system_generic.ml b/src/system/system_generic.ml
        index 9230cdc1..140bd849 100755
        --- a/src/system/system_generic.ml
        +++ b/src/system/system_generic.ml
        @@ -47,7 +47,7 @@ let open_out_gen = open_out_gen
         let chmod = Unix.chmod
         let chown = Unix.chown
         let utimes = Unix.utimes
        -let link = Unix.link
        +let link x y = Unix.link x y
         let openfile = Unix.openfile
         let opendir f =
           let h = Unix.opendir f in
        EOF

    - name: "2.51.0: Patch connection header in _prev"
      if: contains(matrix.job.ref, '2.51.0')
      shell: bash
      run: |
        # Connection header string was broken in 2.51.0
        cd _prev && git apply - <<"EOF"
        diff --git a/src/remote.ml b/src/remote.ml
        index ddca0d77..7f819eab 100644
        --- a/src/remote.ml
        +++ b/src/remote.ml
        @@ -920,7 +920,7 @@ let connectionHeader =
             Scanf.sscanf Sys.ocaml_version "%d.%d.%d" (fun x y z -> (x,y,z)) in
           let compiler =
             if    major < 4 
        -       || major = 4 && minor <= 2
        +       || major = 4 && minor < 2
                || major = 4 && minor = 2 && patchlevel <= 1
             then "<= 4.01.1"
             else ">= 4.01.2"
        EOF

    - name: "2.51.2: Patch _prev for newer compilers"
      if: contains(matrix.job.ref, '2.51.2')
      shell: bash
      run: |
        cd _prev && git apply - <<"EOF"
        diff --git a/src/files.ml b/src/files.ml
        index 5ff18810..1d1fbcc6 100644
        --- a/src/files.ml
        +++ b/src/files.ml
        @@ -734,7 +734,7 @@ let get_files_in_directory dir =
           with End_of_file ->
             dirh.System.closedir ()
           end;
        -  Sort.list (<) !files
        +  List.sort String.compare !files
        
         let ls dir pattern =
           Util.convertUnixErrorsToTransient
        diff --git a/src/recon.ml b/src/recon.ml
        index 2c619bb8..2412c18e 100644
        --- a/src/recon.ml
        +++ b/src/recon.ml
        @@ -661,8 +661,8 @@ let rec reconcile
        
         (* Sorts the paths so that they will be displayed in order                   *)
         let sortPaths pathUpdatesList =
        -  Sort.list
        -    (fun (p1, _) (p2, _) -> Path.compare p1 p2 <= 0)
        +  List.sort
        +    Path.compare
             pathUpdatesList
        
         let rec enterPath p1 p2 t =
        diff --git a/src/system/system_generic.ml b/src/system/system_generic.ml
        index 453027d0..290851e1 100755
        --- a/src/system/system_generic.ml
        +++ b/src/system/system_generic.ml
        @@ -47,7 +47,7 @@ let open_out_gen = open_out_gen
         let chmod = Unix.chmod
         let chown = Unix.chown
         let utimes = Unix.utimes
        -let link = Unix.link
        +let link x y = Unix.link x y
         let openfile = Unix.openfile
         let opendir f =
           let h = Unix.opendir f in
        EOF

    - run: cd _prev && opam exec -- make src UISTYLE=text

    # IMPORTANT! These tests do not exercise the entire RPC API. Yet, they
    # should work fine as a smoke test.

    - name: Run self-tests over RPC - new client to prev server
      env:
        UNISON: test1
      shell: bash
      run: |
        # Separate backup dir must be set for server instance so that the central
        # backup location of both instances doesn't overlap
        UNISONBACKUPDIR=./_prev/src/testbak_s _prev/src/unison -socket 55443 &
        sleep 1 # Wait for the server to be fully started
        _new/src/unison -ui text -selftest testr_c socket://127.0.0.1:55443/testr_s -killserver

    - name: "2.48: Run self-tests over RPC - prev client to new server"
      if: contains(matrix.job.ref, '2.48')
      env:
        UNISON: test2
      shell: bash
      run: |
        cp _new/src/unison _new/src/unison-2.48
        # Separate backup dir must be set for server instance so that the central
        # backup location of both instances doesn't overlap
        UNISONBACKUPDIR=./_new/src/testbak_s _new/src/unison-2.48 -socket 55443 &
        sleep 1 # Wait for the server to be fully started
        _prev/src/unison -ui text -selftest testr_c socket://127.0.0.1:55443/testr_s -killserver

    - name: Run self-tests over RPC - prev client to new server
      if: ${{ !contains(matrix.job.ref, '2.48') }}
      env:
        UNISON: test2
      shell: bash
      run: |
        # Separate backup dir must be set for server instance so that the central
        # backup location of both instances doesn't overlap
        UNISONBACKUPDIR=./_new/src/testbak_s _new/src/unison -socket 55443 &
        sleep 1 # Wait for the server to be fully started
        _prev/src/unison -ui text -selftest testr_c socket://127.0.0.1:55443/testr_s -killserver


  opam_dune_build:
    strategy:
      fail-fast: false
      matrix:
        job:
        - { os: ubuntu-18.04   , ocaml-compiler: 4.11.x }
        - { os: ubuntu-20.04   , ocaml-compiler: 4.12.x }
        - { os: macos-10.15    , ocaml-compiler: 4.11.x }
        - { os: macos-11       , ocaml-compiler: 4.12.x }

    runs-on: ${{ matrix.job.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use OCaml ${{ matrix.job.ocaml-compiler }}
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: "${{ matrix.job.ocaml-compiler }}"

    - run: opam install . --deps-only

    - run: opam exec -- dune build && cp -L ./_build/install/default/bin/unison* ./src/

#    - run: opam exec -- make test

  bytecode_build:
    strategy:
      fail-fast: false
      matrix:
        job:
        - { os: ubuntu-18.04   , ocaml-compiler: 4.14.x }
        - { os: ubuntu-18.04   , ocaml-compiler: 4.05.x }

    runs-on: ${{ matrix.job.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use OCaml ${{ matrix.job.ocaml-compiler }}
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: "${{ matrix.job.ocaml-compiler }}"
        opam-pin: false
        opam-depext: false

    - run: opam exec -- make src UISTYLE=text NATIVE=false

    - run: opam exec -- make test
